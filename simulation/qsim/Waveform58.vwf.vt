// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/03/2022 14:33:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [3:0] KEY;
reg [17:0] SW;
// wires                                               
wire [0:6] HEX0;
wire [0:6] HEX1;
wire [0:6] HEX2;
wire [0:6] HEX3;
wire [31:0] RD;
wire [31:0] RS;
wire [31:0] RT;
wire [31:0] data;
wire entrada;
wire [31:0] instAtual;
wire [31:0] outULA;
wire [31:0] posicaoMem;
wire printa;
wire zero;

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.KEY(KEY),
	.RD(RD),
	.RS(RS),
	.RT(RT),
	.SW(SW),
	.data(data),
	.entrada(entrada),
	.instAtual(instAtual),
	.outULA(outULA),
	.posicaoMem(posicaoMem),
	.printa(printa),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK_50
initial
begin
	CLOCK_50 = 1'b1;
	# 500;
	repeat(999)
	begin
		CLOCK_50 = 1'b0;
		CLOCK_50 = #500 1'b1;
		# 500;
	end
	CLOCK_50 = 1'b0;
end 
endmodule

